#include "primer/orset.h"
#include <algorithm>
#include <string>
#include <vector>
#include "common/exception.h"
#include "fmt/format.h"

namespace bustub {

    template <typename T>
    auto ORSet<T>::Contains(const T &elem) const -> bool {
        for (auto &item : elements_set) {
            if (item.second == elem) {
                return true;
            }
        }
        return false;
    }

    template <typename T>
    void ORSet<T>::Add(const T &elem, uid_t uid) {
        elements_set.emplace(uid, elem);
    }

    template <typename T>
    void ORSet<T>::Remove(const T &elem) {
        for (auto &item : elements_set) {
            if (item.second == elem) {
                tombs_set.emplace(item.first, item.second);
                elements_set.erase(item.first);
                return;
            }
        }
    }

    template <typename T>
    void ORSet<T>::Merge(const ORSet<T> &other) {
        for (auto &item : other.tombs_set) {
            elements_set.erase(item.first);
            tombs_set.emplace(item.first,item.second);
        }
        for (auto &item : other.elements_set) {
            if (tombs_set.find(item.first) == tombs_set.end()) {
                elements_set.emplace(item.first, item.second);
            }
        }
    }

    template <typename T>
    auto ORSet<T>::Elements() const -> std::vector<T> {
        std::vector<T> vec;
        for (auto &item : elements_set) {
            vec.emplace_back(item.second);
        }
        return vec;
    }

    template <typename T>
    auto ORSet<T>::ToString() const -> std::string {
        auto elements = Elements();
        std::sort(elements.begin(), elements.end());
        return fmt::format("{{{}}}", fmt::join(elements, ", "));
    }

// 显示实例化也称为外部实例化。在不发生函数调用的时候将函数模板实例化，或者在不使用类模板的时候将类模板实例化称之为模板显示实例化。
// 对于函数模板而言，不管是否发生函数调用，都可以通过显示实例化声明实例化函数模板。
// 对于类模板而言，不管是否生成一个模板类的对象，都可以直接通过显示实例化声明实例化类模板。

// 模板的实例化指函数模板（类模板）生成模板函数（模板类）的过程。对于函数模板而言，
// 模板实例化之后，会生成一个真正的函数。而类模板经过实例化之后，只是完成了类的定义，模板类的成员函数需要到调用时才会被初始化。

// 用于模版声明和实现不在同一个源文件下的情况，可以在这实例化，在另一个文件直接调用，生成一个真实定义的类

    template class ORSet<int>;
    template class ORSet<std::string>;

}  // namespace bustub
