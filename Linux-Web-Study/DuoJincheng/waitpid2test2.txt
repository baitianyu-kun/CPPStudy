//
// Created by baitianyu on 5/20/24.
//
#include "iostream"
#include "signal.h"
#include "stdio.h"
#include "stdlib.h"
#include "sys/types.h"
#include "sys/wait.h"
#include "unistd.h"
using namespace std;

void handle_child(int sigchild) {
    int status;
    pid_t pid;
    while ((pid = waitpid(-1, &status, WNOHANG)) > 0) {
        printf("parent pid:%d, handled sig:%d, child pid:%d\n", getpid(), sigchild, pid);
    }
}

int main() {
    sigset_t set;
    sigemptyset(&set);
    sigaddset(&set, SIGCHLD);
    sigprocmask(SIG_BLOCK, &set, NULL);

    // 创建10个子进程
    pid_t pid;
    int i;
    for (i = 0; i < 3; i++) {
        pid = fork();
        if (pid == 0)
            break;
    }
    if (pid > 0) {
        printf("parent created pid:%d\n", getpid());
        struct sigaction act;
        act.sa_flags = 0;
        act.sa_handler = handle_child;
        sigemptyset(&act.sa_mask);
        int res = sigaction(SIGCHLD, &act, nullptr);
        if (res == -1) {
            perror("sig error");
            exit(-1);
        }
        sigprocmask(SIG_UNBLOCK, &set, nullptr);
        while (true) {
            sleep(1);
        }

    } else if (pid == 0) {
        printf("child created pid:%d\n", getpid());
        exit(0);
    }
}
